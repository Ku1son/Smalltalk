Object subclass: Wielokat [
    | wierzcholki nazwa |
    
    Wielokat >> initLW: liczbaWierzcholkow initNazwa: nowaNazwa [
        nazwa := nowaNazwa.
        wierzcholki := Array new: liczbaWierzcholkow.
        wierzcholki at: 1 put: 0@0.
    ]

    Wielokat >> nazwa [
        ^ nazwa.
    ]
    Wielokat >> nazwa: nowaNazwa [
        nazwa := nowaNazwa
    ]
    Wielokat >> wierzcholki [
        ^ wierzcholki.
    ]
    
    Wielokat >> wysrodkuj [
        | a b |
        a := ((wierzcholki at: 1) x + (wierzcholki at: 3) x)/2.
        b := ((wierzcholki at: 1) y + (wierzcholki at: 3) y )/2.
        1 to: 4 do: [ :i |
            wierzcholki at: i put: ((wierzcholki at: i) x - a)@((wierzcholki at: i) y - b).
        ].
    ]
    
    Wielokat >> drukuj [
    | poleWielokata |
    poleWielokata := self pole.
    Transcript show: 'Nazwa: ', self nazwa; cr.
    Transcript show: 'Wierzchołki:'; cr.
    1 to: wierzcholki size do: [ :i | Transcript show: '  ', (wierzcholki at: i) printString; cr ].
    Transcript show: 'Pole: ', poleWielokata printString; cr; cr.
    ]
    
    
    Wielokat >> obroc: kat [
    | katWRad centroidX centroidY |
    
    (kat > 0 and: [kat <= 90]) ifFalse: [
        ^ self error: 'Kąt musi być w zakresie od 0 do 90 stopni'.
    ].
    
    katWRad := kat degreesToRadians.
    centroidX := 0.
    centroidY := 0.

    "(0,0) jako punktu odniesienia"
    
    
    1 to: wierzcholki size do: [:i |
        | staryX staryY nowyX nowyY |
        staryX := (wierzcholki at: i) x.
        staryY := (wierzcholki at: i) y.

        nowyX := (staryX * katWRad cos) - (staryY * katWRad sin).
        nowyY := (staryX * katWRad sin) + (staryY * katWRad cos).

        wierzcholki at: i put: nowyX@nowyY.
    ].
    ]
]


Wielokat subclass: Kwadrat [
        | bok |
    Kwadrat >> initBok: nowyBok [
        super initLW: 4 initNazwa: 'Kwadrat'.
        wierzcholki at: 2 put: nowyBok@0.
        wierzcholki at: 3 put: nowyBok@nowyBok.
        wierzcholki at: 4 put: 0@nowyBok.
        bok := nowyBok.
    ]
    
    Kwadrat >> pole [
        ^ (bok) squared.
    ]
    
    Kwadrat >> + figura [
        | p |
        p := self pole + figura pole.
        ^ (Kwadrat new) initBok: p sqrt.
    ]
]


Wielokat subclass: Romb [
    | bok kat |
    
    Romb >> initBok: nowyBok initKat: nowyKat [
        super initLW: 4 initNazwa: 'Romb'.
        kat := nowyKat.
        bok := nowyBok.
        "sprawdzone przez matematyka"
        wierzcholki at: 2 put: bok @ 0.
        wierzcholki at: 3 put: (bok * (1 + kat cos)) @ (bok * (kat sin)).
        wierzcholki at: 4 put: (bok * (kat cos)) @ (bok * (kat sin)).
    ]

    
    Romb >> pole [
        ^ bok * bok * kat sin.
    ]
    
    
    Romb >> + figura [
        | nowePole nowyBok |
        nowePole := self pole + figura pole.
        nowyBok := (nowePole / (kat sin)) sqrt.
        ^ (Romb new) initBok: nowyBok initKat: kat.
    ]
]






"| k1 k2 k3 |
k1 := (Kwadrat new) initBok: 2.
k2 := (Kwadrat new) initBok: 3.
k3 := k1 + k2.

Transcript show: 'Pole kwadratu k1: ', k1 pole printString; cr.
Transcript show: 'Pole kwadratu k2: ', k2 pole printString; cr.
Transcript show: 'Pole kwadratu k3 (suma pól k1 i k2): ', k3 pole printString; cr.
Transcript show: 'Bok nowego kwadratu: ', (k3 wierzcholki at: 2) x printString; cr.
"


"| r1 r2 |
r1 := (Romb new) initBok: 3 initKat: 45 degreesToRadians.
r2 := (Romb new) initBok: 4 initKat: 45 degreesToRadians.
r3 := r1 + r2.



Transcript show: 'Pole rombu r1: ', r1 pole printString; cr.
Transcript show: 'Pole rombu r2: ', r2 pole printString; cr.
Transcript show: 'Pole rombu r3 (suma pól r1 i r2): ', r3 pole printString; cr."




| kwadrat |
kwadrat := (Kwadrat new) initBok: 3.
kwadrat wysrodkuj.
kwadrat drukuj.
kwadrat obroc: 45.
kwadrat drukuj.

| romb |
romb := (Romb new) initBok: 4 initKat: 60 degreesToRadians.
romb drukuj.
romb obroc: 45.
romb drukuj.
